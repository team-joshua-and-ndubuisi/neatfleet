// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  phone      String    @unique @db.VarChar(255)
  password   String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  is_active  Boolean   @default(true)
  admin      Admin? // <-- Opposite relation field
  Address    Address[] // Opposite relation field

  @@map("users")
}

model Admin {
  id      String @id @default(uuid()) @db.Uuid
  user_id String @unique @db.Uuid
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("admins") // This tells Prisma the actual table name is "admins"
}

model Address {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id   String   @db.Uuid
  street    String
  city      String
  state     String
  zip       String
  latitude  Float?   @db.DoublePrecision
  longitude Float?   @db.DoublePrecision
  isPrimary Boolean? @default(false)

  user User @relation(fields: [user_id], references: [id])

  @@map("addresses")
}
